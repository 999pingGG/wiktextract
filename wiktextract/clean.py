# This file contains code to clean Wiktionary annotations from a string and to
# produce plain text from it, typically for glossary entries but this is also
# called for various other data to produce clean strings.
#
# This file also contains code for cleaning qualifiers for the "tags" field.
#
# Copyright (c) 2018-2021 Tatu Ylonen.  See file LICENSE and https://ylonen.org

import re
import html
import unicodedata
from wikitextprocessor.common import MAGIC_FIRST, MAGIC_LAST
from .config import WiktionaryConfig

######################################################################
# Cleaning values into plain text.
######################################################################

superscript_ht = {
    "1": "¬π",
    "2": "¬≤",
    "3": "¬≥",
    "4": "‚Å¥",
    "5": "‚Åµ",
    "6": "‚Å∂",
    "7": "‚Å∑",
    "8": "‚Å∏",
    "9": "‚Åπ",
    "+": "‚Å∫",
    "-": "‚Åª",
    "=": "‚Åº",
    "(": "‚ÅΩ",
    ")": "‚Åæ",
    "A": "·¥¨",
    "B": "·¥Æ",
    "D": "·¥∞",
    "E": "·¥±",
    "G": "·¥≥",
    "H": "·¥¥",
    "I": "·¥µ",
    "J": "·¥∂",
    "K": "·¥∑",
    "L": "·¥∏",
    "M": "·¥π",
    "N": "·¥∫",
    "O": "·¥º",
    "P": "·¥æ",
    "R": "·¥ø",
    "T": "·µÄ",
    "U": "·µÅ",
    "V": "‚±Ω",
    "W": "·µÇ",
    "a": "·µÉ",
    "b": "·µá",
    "c": "·∂ú",
    "d": "·µà",
    "e": "·µâ",
    "f": "·∂†",
    "g": "·µç",
    "h": " ∞",
    "i": "‚Å±",
    "j": " ≤",
    "k": "·µè",
    "l": "À°",
    "m": "·µê",
    "n": "‚Åø",
    "o": "·µí",
    "p": "·µñ",
    "r": " ≥",
    "s": "À¢",
    "t": "·µó",
    "u": "·µò",
    "v": "·µõ",
    "w": " ∑",
    "x": "À£",
    "y": " ∏",
    "z": "·∂ª",
    "Œ≤": "·µù",
    "Œ≥": "·µû",
    "Œ¥": "·µü",
    "Œ∏": "·∂ø",
    "Œπ": "·∂•",
    "œÜ": "·µ†",
    "œá": "·µ°",
    "‚àû": " ·™≤"
}

subscript_ht = {
    "0": "‚ÇÄ",
    "1": "‚ÇÅ",
    "2": "‚ÇÇ",
    "3": "‚ÇÉ",
    "4": "‚ÇÑ",
    "5": "‚ÇÖ",
    "6": "‚ÇÜ",
    "7": "‚Çá",
    "8": "‚Çà",
    "9": "‚Çâ",
    "+": "‚Çä",
    "-": "‚Çã",
    "=": "‚Çå",
    "(": "‚Çç",
    ")": "‚Çé",
    "a": "‚Çê",
    "e": "‚Çë",
    "h": "‚Çï",
    "i": "·µ¢",
    "j": "‚±º",
    "k": "‚Çñ",
    "l": "‚Çó",
    "m": "‚Çò",
    "n": "‚Çô",
    "o": "‚Çí",
    "p": "‚Çö",
    "r": "·µ£",
    "s": "‚Çõ",
    "t": "‚Çú",
    "u": "·µ§",
    "v": "·µ•",
    "x": "‚Çì",
    "…ô": "‚Çî",
    "œÅ": "·µ®",
    "œÜ": "·µ©",
    "œá": "·µ™",
}

def to_superscript(text):
    "Converts text to superscript."
    if not text:
        return ""
    if all(x in superscript_ht for x in text):
        return "".join(superscript_ht[x] for x in text)
    if len(text) == 1:
        return "^" + text
    return "^({})".format(text)

def to_subscript(text):
    """Converts text to subscript."""
    if not text:
        return ""
    if all(x in subscript_ht for x in text):
        return "".join(subscript_ht[x] for x in text)
    if len(text) == 1:
        return "_" + text
    return "_({})".format(text)

def to_chem(text):
    """Converts text to chemical formula, making digits subscript."""
    return "".join(to_subscript(x) if x.isdigit() else x
                   for x in text)

math_map = {
    "ldots": "‚Ä¶",
    "textbar": "|",
    "textbullet": "‚Ä¢",
    "textbackslash": "\\",
    "S": "¬ß",
    "textless": "<",
    "textgreater": ">",
    "sim": "‚àº",
    "backsim": "‚àΩ",
    "tiny": "",
    "scriptsize": "",
    "footnotesize": "",
    "small": "",
    "normalsize": "",
    "large": "",
    "ge": ">",
    "geq": ">",
    "le": "<",
    "leq": "<",
    "leq": "‚â§",
    "geq": "‚â•",
    "neq": "‚â†",
    "doteq": "‚âê",
    "approx": "‚âà",
    "times": "‚®Ø",
    "div": "√∑",
    "pm": "¬±",
    "mp": "‚àì",
    "cdot": "¬∑",
    "circ": "‚àò",
    "ast": "‚àó",
    "smallsetminus": "‚àñ",
    "slash": "‚àï",
    "prime": "‚Ä≤",
    "textprime": "‚Ä≤",
    "second": "‚Ä≤‚Ä≤",
    "third": "‚Ä≤‚Ä≤‚Ä≤",
    "fourth": "‚Ä≤‚Ä≤‚Ä≤‚Ä≤",
    "backprime": "‚Äµ",
    "dagger": "‚Ä†",
    "ddagger": "‚Ä°",
    "bullet": "‚Ä¢",
    "ldots": "...",
    "dots": "‚Ä¶",
    "cat": "‚ÅÄ",
    "cdots": "‚ãØ",
    "infty": "‚àû",
    "neg": "¬¨",
    "wedge": "‚àß",
    "vee": "‚à®",
    "forall": "‚àÄ",
    "in": "‚àà",
    "ni": "‚àã",
    "nni": "‚àå",
    "rightarrow": "‚Üí",
    "leftarrow": "‚Üê",
    "leftrightarrow": "‚Üî",
    "uparrow": "‚Üë",
    "downarrow": "‚Üì",
    "updownarrow": "‚Üï",
    "nwarrow": "‚Üñ",
    "nearrow": "‚Üó",
    "searrow": "‚Üò",
    "swarrow": "‚Üô",
    "nleftarrow": "‚Üö",
    "nrightarrow": "‚Üõ",
    "twoheadleftarrow": "‚Üû",
    "twoheadrightarrow": "‚Ü†",
    "leftarrowtail": "‚Ü¢",
    "rightarrowtail": "‚Ü£",
    "mapsfrom": "‚Ü§",
    "MapsUp": "‚Ü•",
    "mapsto": "‚Ü¶",
    "MapsDown": "‚Üß",
    "hookleftarrow": "‚Ü©",
    "hookrightarrow": "‚Ü™",
    "looparrowleft": "‚Ü´",
    "looparrowright": "‚Ü¨",
    "leftrightsquigarrow": "‚Ü≠",
    "nleftrightarrow": "‚ÜÆ",
    "lightning": "‚ÜØ",
    "Lsh": "‚Ü∞",
    "Rsh": "‚Ü±",
    "dlsh": "‚Ü≤",
    "drsh": "‚Ü≥",
    "curvearrowleft": "‚Ü∂",
    "curvearrowright": "‚Ü∑",
    "circlearrowleft": "‚Ü∫",
    "circlearrowright": "‚Üª",
    "leftharpoonup": "‚Üº",
    "leftharpoondown": "‚ÜΩ",
    "upharpoonright": "‚Üæ",
    "upharpoonleft": "‚Üø",
    "rightharpoonup": "‚áÄ",
    "rightharpoondown": "‚áÅ",
    "downharpoonright": "‚áÇ",
    "downharpoonleft": "‚áÉ",
    "rightleftarrows": "‚áÑ",
    "updownarrows": "‚áÖ",
    "leftrightarrows": "‚áÜ",
    "leftleftarrows": "‚áá",
    "upuparrows": "‚áà",
    "rightrightarrows": "‚áâ",
    "downdownarrows": "‚áä",
    "leftrightharpoons": "‚áã",
    "rightleftharpoons": "‚áå",
    "nLeftarrow": "‚áç",
    "nLeftrightarrow": "‚áé",
    "nRightarrow": "‚áè",
    "Leftarrow": "‚áê",
    "Uparrow": "‚áë",
    "Rightarrow": "‚áí",
    "Downarrow": "‚áì",
    "Leftrightarrow": "‚áî",
    "Updownarrow": "‚áï",
    "Nwarrow": "‚áñ",
    "Nearrow": "‚áó",
    "Searrow": "‚áò",
    "Swarrow": "‚áô",
    "Lleftarrow": "‚áö",
    "Rrightarrow": "‚áõ",
    "leftsquigarrow": "‚áú",
    "rightsquigarrow": "‚áù",
    "dashleftarrow": "‚á†",
    "dashrightarrow": "‚á¢",
    "LeftArrowBar": "‚á§",
    "RightArrowBar": "‚á•",
    "downuparrows": "‚áµ",
    "pfun": "‚á∏",
    "ffun": "‚áª",
    "leftarrowtriangle": "‚áΩ",
    "rightarrowtriangle": "‚áæ",
    "leftrightarrowtriangle": "‚áø",
    "subset": "‚äÇ",
    "subseteq": "‚äÜ",
    "supset": "‚äÉ",
    "supseteq": "‚äá",
    "prec": "‚â∫",
    "succ": "‚âª",
    "exists": "‚àÉ",
    "nexists": "‚àÑ",
    "notin": "‚àâ",
    "Rightarrow": "‚áí",
    "Leftarrow": "‚áê",
    "cup": "‚à™",
    "cap": "‚à©",
    "mid": "‚à£",
    "nmid": "‚à§",
    "parallel": "‚à•",
    "nparallel": "‚à¶",
    "rightangle": "‚àü",
    "angle": "‚à†",
    "measuredangle": "‚à°",
    "sphericalangle": "‚à¢",
    "propto": "‚àù",
    "vdots": "‚ãÆ",
    "diameter": "‚àÖ",
    "lceil": "‚åà",
    "rceil": "‚åâ",
    "lfloor": "‚åä",
    "rfloor": "‚åã",
    "varnothing": "‚àÖ",
    "sptilde": "~",
    "cent": "¬¢",
    "pounds": "¬£",
    "yen": "¬•",
    "backslash": "\\",
    "spddot": "Ãà",
    "sphat": "^",
    "Micro": "Œº",
    "eth": "√∞",
    "imath": "ƒ±",
    "jmath": "»∑",
    "circledR": "¬Æ",
    "therefore": "‚à¥",
    "because": "‚àµ",
    "Proportion": "‚à∑",
    "eqcolon": "‚àπ",

    "alpha": "ùõº",
    "beta": "ùõΩ",
    "varbeta": "Œ≤",
    "gamma": "ùõæ",
    "delta": "ùõø",
    "epsilon": "ùúÄ",
    "varepsilon": "Œµ",
    "backepsilon": "œ∂",
    "zeta": "ùúÅ",
    "eta": "ùúÇ",
    "theta": "ùúÉ",
    "vartheta": "Œ∏",
    "iota": "ùúÑ",
    "kappa": "ùúÖ",
    "varkappa": "ùúò",
    "lambda": "ùúÜ",
    "mu": "ùúá",
    "nu": "ùúà",
    "xi": "ùúâ",
    "pi": "ùúã",
    "varpi": "ùúõ",
    "rho": "ùúå",
    "varrho": "ùúö",
    "sigma": "ùúé",
    "varsigma": "œÇ",
    "tau": "ùúè",
    "upsilon": "ùúê",
    "phi": "ùúô",
    "varphi": "ùúë",
    "chi": "ùúí",
    "psi": "ùúì",
    "omega": "ùúî",
    "Gamma": "ùõ§",
    "Delta": "ùõ•",
    "Theta": "ùõ©",
    "Lambda": "ùõ¨",
    "Xi": "ùõØ",
    "Pi": "ùõ±",
    "Sigma": "ùõ¥",
    "Upsilon": "ùõ∂",
    "Phi": "ùõ∑",
    "Psi": "ùõπ",
    "Omega": "ùõ∫",
    "nabla": "‚àá",
    "partial": "‚àÇ",
    "int": "‚à´",
    "iint": "‚à´‚à´",
    "iint": "‚à´‚à´‚à´",
    "oint": "‚àÆ",
    "oiint": "‚àÆ‚àÆ",
    "Euler": "∆ê",
    "Im": "‚Ñë",
    "ell": "‚Ñì",
    "wp": "‚Ñò",
    "Re": "‚Ñú",
    "tcohm": "‚Ñ¶",
    "mho": "‚Ñß",
    "Angstroem": "‚Ñ´",
    "Finv": "‚Ñ≤",
    "aleph": "◊ê",
    "beth": "◊ë",
    "gimel": "◊í",
    "daleth": "◊ì",
    "Yup": "‚ÖÑ",
    "complement": "‚àÅ",
    "dotplus": "‚àî",
    "hslash": "‚Ñè",
    "invamp": "‚Öã",

    "grave": "ÃÄ",
    "acute": "ÃÅ",
    "hat": "ÃÇ",
    "tilde": "ÃÉ",
    "bar": "ÃÑ",
    "breve": "ÃÜ",
    "dot": "Ãá",
    "ddot": "Ãà",
    "dddot": "‚Éõ",
    "dddot": "‚Éú",
    "mathring": "Ãä",
    "check": "Ãå",
    "not": "Ã∏",

    "textstyle": "",
    "sqrt": "‚àö",  # ‚àõ ‚àú
    "frac": " / ",
    "sum": "‚àë",
    "prod": "‚àè",
    "coprod": "‚àê",
    "lvec": "‚Éê",
    "vec": "‚Éë",
    "left": "",
    "right": "",
    "bigl": "",
    "bigr": "",
    "lbrace": "{",
    "rbrace": "}",
    "lbrack": "[",
    "rbrack": "]",
    "langle": "‚ü®",
    "rangle": "‚ü©",
    "vert": "|",
    "Vert": "‚Äñ",
    "CapitalDifferentialD": "‚ÖÖ",
    "DifferentialD": "‚ÖÜ",
    "ExponentialE": "‚Öá",
    "ComplexI": "‚Öà",
    "ComplexJ": "‚Öâ",
    "over": "/",

    "style": "",
}

mathcal_map = {
    "A": "ùíú",
    "B": "‚Ñ¨",
    "C": "ùíû",
    "D": "ùíü",
    "E": "‚Ñ∞",
    "F": "‚Ñ±",
    "G": "ùí¢",
    "H": "‚Ñã",
    "I": "‚Ñê",
    "J": "ùí•",
    "K": "ùí¶",
    "L": "‚Ñí",
    "M": "‚Ñ≥",
    "N": "ùí©",
    "O": "ùí™",
    "P": "ùí´",
    "Q": "ùí¨",
    "R": "‚Ñõ",
    "S": "ùíÆ",
    "T": "ùíØ",
    "U": "ùí∞",
    "V": "ùí±",
    "W": "ùí≤",
    "X": "ùí≥",
    "Y": "ùí¥",
    "Z": "ùíµ",
    "a": "ùí∂",
    "b": "ùí∑",
    "c": "ùí∏",
    "d": "ùíπ",
    "e": "‚ÑØ",
    "f": "ùíª",
    "g": "‚Ñä",
    "h": "ùíΩ",
    "i": "ùíæ",
    "j": "ùíø",
    "k": "ùìÄ",
    "l": "ùìÅ",
    "m": "ùìÇ",
    "n": "ùìÉ",
    "o": "‚Ñ¥",
    "p": "ùìÖ",
    "q": "ùìÜ",
    "r": "ùìá",
    "s": "ùìà",
    "t": "ùìâ",
    "u": "ùìä",
    "v": "ùìã",
    "w": "ùìå",
    "x": "ùìç",
    "y": "ùìé",
    "z": "ùìè",
}

mathfrak_map = {
    "A": "ùîÑ",
    "B": "ùîÖ",
    "C": "‚Ñ≠",
    "D": "ùîá",
    "E": "ùîà",
    "F": "ùîâ",
    "G": "ùîä",
    "H": "‚Ñå",
    "J": "ùîç",
    "K": "ùîé",
    "L": "ùîè",
    "M": "ùîê",
    "N": "ùîë",
    "O": "ùîí",
    "P": "ùîì",
    "Q": "ùîî",
    "S": "ùîñ",
    "T": "ùîó",
    "U": "ùîò",
    "V": "ùîô",
    "W": "ùîö",
    "X": "ùîõ",
    "Y": "ùîú",
    "Z": "‚Ñ®",
}

mathbb_map = {
    "A": "ùî∏",
    "B": "ùîπ",
    "C": "‚ÑÇ",
    "D": "ùîª",
    "E": "ùîº",
    "F": "ùîΩ",
    "G": "ùîæ",
    "H": "‚Ñç",
    "I": "ùïÄ",
    "J": "ùïÅ",
    "K": "ùïÇ",
    "L": "ùïÉ",
    "M": "ùïÑ",
    "N": "‚Ñï",
    "O": "ùïÜ",
    "P": "‚Ñô",
    "Q": "‚Ñö",
    "R": "‚Ñù",
    "S": "ùïä",
    "T": "ùïã",
    "U": "ùïå",
    "V": "ùïç",
    "W": "ùïé",
    "X": "ùïè",
    "Y": "ùïê",
    "Z": "‚Ñ§",
    "a": "ùïí",
    "b": "ùïì",
    "c": "ùïî",
    "d": "ùïï",
    "e": "ùïñ",
    "f": "ùïó",
    "g": "ùïò",
    "h": "ùïô",
    "i": "ùïö",
    "j": "ùïõ",
    "k": "ùïú",
    "l": "ùïù",
    "m": "ùïû",
    "n": "ùïü",
    "o": "ùï†",
    "p": "ùï°",
    "q": "ùï¢",
    "r": "ùï£",
    "s": "ùï§",
    "t": "ùï•",
    "u": "ùï¶",
    "v": "ùïß",
    "w": "ùï®",
    "x": "ùï©",
    "y": "ùï™",
    "z": "ùï´",
    "pi": "‚Ñº",
    "gamma": "‚ÑΩ",
    "Gamma": "‚Ñæ",
    "Pi": "‚Ñø",
    "Sigma": "‚ÖÄ",
}

def mathcal_fn(text):
    return "".join(mathcal_map.get(x, x) for x in text)

def mathfrak_fn(text):
    return "".join(mathfrak_map.get(x, x) for x in text)

def mathbb_fn(text):
    return "".join(mathbb_map.get(x, x) for x in text)

def to_math(text):
    """Converts a mathematical formula to ASCII."""
    print("to_math: {!r}".format(text))
    magic_vec = []

    def expand(text):
        while True:
            orig = text
            text = re.sub(r"[{:c}-{:c}]".format(MAGIC_FIRST, MAGIC_LAST),
                          lambda m: magic_vec[ord(m.group(0)) - MAGIC_FIRST],
                          text)
            if text == orig:
                break
        return text.strip()

    def recurse(text):
        def math_magic(text, left, right, fn):
            regexp = r"{}([^{}{}]+){}".format(
                re.escape(left), re.escape(left),
                re.escape(right), re.escape(right))
            regexp = re.compile(regexp)

            def repl(m):
                magic = chr(MAGIC_FIRST + len(magic_vec))
                t = fn(m.group(1))
                magic_vec.append(t)
                return magic

            while True:
                orig = text
                text = re.sub(regexp, repl, text)
                if text == orig:
                    break
            return text

        def expand_group(v):
            fn = None
            if re.match(r"\\mathcal\b", v):
                fn = mathcal_fn
                v = v[8:].strip()
            elif re.match(r"\\mathfrak\b", v):
                fn = mathfrak_fn
                v = v[9:].strip()
            elif re.match(r"\\mathbb\b", v):
                fn = mathbb_fn
                v = v[7:]
            elif re.match(r"\\(begin|end)\b", v):
                v = ""  # Skip
            elif re.match(r"\\text\b", v):
                v = v[5:]
            elif re.match(r"\\sqrt\[", v):
                a = v[6:-1].strip()
                if a == "2":
                    v = "‚àö"
                elif a == "3":
                    v = "‚àõ",
                elif a == "4":
                    v = "‚àú"
                else:
                    v = to_superscript(a) + "‚àö"
            elif re.match(r"\\sqrt($|[0-9]|\b)", v):
                v = "‚àö"
            elif re.match(r"\\frac($|[0-9]|\b)", v):
                print("frac: {!r}".format(v))
                m = re.match(r"\\frac\s*(\\[a-zA-Z]+|\\.|.)\s*"
                             r"(\\[a-zA-Z]+|\\.|.)$", v)
                if not m:
                    print("MATH FRAC ERROR")
                    return v
                a, b = m.groups()
                a = expand_group(a.strip())
                b = expand_group(b.strip())
                if len(a) > 1:
                    a = "(" + a + ")"
                if len(b) > 1:
                    b = "(" + b + ")"
                v = a + "/" + b
            elif v.startswith("_"):
                fn = to_subscript
                v = v[1:]
            elif v.startswith("^"):
                fn = to_superscript
                v = v[1:]
            if v.startswith("\\"):
                mapped = math_map.get(v[1:].strip())
                if mapped is None:
                    if v[1:].strip().isalnum():
                        v = " " + v[1:].strip() + " "
                    else:
                        v = v[1:].strip()
                else:
                    v = mapped
            elif v.isspace() or v in ("&",):  # Ignore certain special chars
                v = ""
            if fn is not None:
                v = expand(v)
                v = fn(v)
            if (((parts and parts[-1][-1].isalpha() and v and v[0].isalpha()) or
                 (parts and parts[-1][-1].isdigit() and v and
                  v[0].isdigit())) and
                len(parts[-1]) > 1 and len(v) > 1):
                v = " " + v
            v = expand(v)
            return v

        parts = []
        while True:
            orig = text
            text = math_magic(text, "{", "}", recurse)
            # text = math_magic(text, "(", ")", lambda x: "(" + recurse(x) + ")")
            if text == orig:
                break
        print("BEFORE ITER: {!r}".format(text))
        for m in re.finditer(r"\s+|"
                             r"\\frac\s*(\\[a-zA-Z]+|\\.|.)\s*"
                             r"(\\[a-zA-Z]+|\\.|.)|"
                             r"(\\(mathcal|mathfrak|mathbb|text|begin|end)"
                             r"\b\s*|"
                             r"\\sqrt\b(\[\d+\])?)?"
                             r"[_^]?(\\[a-zA-Z]+\s*|\\.|\w+|.)", text):
            v = expand_group(m.group(0))
            if v:
                parts.append(v)

        text = "".join(parts)
        return text

    text = recurse(text)
    print("math text final: {!r}".format(text))
    return text


def clean_value(config, title, no_strip=False):
    """Cleans a title or value into a normal string.  This should basically
    remove any Wikimedia formatting from it: HTML tags, templates, links,
    emphasis, etc.  This will also merge multiple whitespaces into one
    normal space and will remove any surrounding whitespace."""
    assert isinstance(config, WiktionaryConfig)
    assert isinstance(title, str)

    def repl_1(m):
        return clean_value(config, m.group(1), no_strip=True)
    def repl_2(m):
        return clean_value(config, m.group(2), no_strip=True)
    def repl_link(m):
        if m.group(2) and m.group(2).lower() in ("file", "image"):
            return ""
        v = m.group(3).split("|")
        return clean_value(config, v[0], no_strip=True)
    def repl_link_bars(m):
        lnk = m.group(1)
        if re.match(r"(?si)(File|Image)\s*:", lnk):
            return ""
        return clean_value(config, m.group(4) or m.group(2) or "",
                           no_strip=True)

    def repl_1_sup(m):
        return to_superscript(clean_value(config, m.group(1)))

    def repl_1_sub(m):
        return to_subscript(clean_value(config, m.group(1)))

    def repl_1_chem(m):
        return to_chem(clean_value(config, m.group(1)))

    def repl_1_math(m):
        return to_math(m.group(1))

    title = re.sub(r"\{\{[^}]+\}\}", "", title)
    # Remove tables
    title = re.sub(r"(?s)\{\|.*?\|\}", "\n", title)
    # Remove references (<ref>...</ref>).
    title = re.sub(r"(?is)<\s*ref\s*[^>]*?>\s*.*?<\s*/\s*ref\s*>\n*", "", title)
    # Replace <br/> by comma space (it is used to express alternatives in some
    # declensions)
    title = re.sub(r"(?si)<\s*br\s*/?>\n*", ", ", title)
    # Change <div> and </div> to newlines.  Ditto for tr, li, table
    title = re.sub(r"(?si)<\s*/?\s*(div|tr|li|table)\b[^>]*>", "\n", title)
    # Change <td> </td> to spaces.  Ditto for th.
    title = re.sub(r"(?si)<\s*/?\s*(td|th)\b[^>]*>", " ", title)
    # Change <sup> ... </sup> to ^
    title = re.sub(r"(?si)<\s*sup\b[^>]*>\s*<\s*/\s*sup\s*>", "", title)
    title = re.sub(r"(?si)<\s*sup\b[^>]*>(.*?)<\s*/\s*sup\s*>",
                   repl_1_sup, title)
    # Change <sub> ... </sub> to _
    title = re.sub(r"(?si)<\s*sub\b[^>]*>\s*<\s*/\s*sup\s*>", "", title)
    title = re.sub(r"(?si)<\s*sub\b[^>]*>(.*?)<\s*/\s*sub\s*>",
                   repl_1_sub, title)
    # Change <chem> ... </chem> using subscripts for digits
    title = re.sub(r"(?si)<\s*chem\b[^>]*>(.*?)<\s*/\s*chem\s*>",
                   repl_1_chem, title)
    # Change <math> ... </math> using special formatting.
    title = re.sub(r"(?si)<\s*math\b[^>]*>(.*?)<\s*/\s*math\s*>",
                   repl_1_math, title)
    # Remove any remaining HTML tags.
    title = re.sub(r"(?s)<\s*[^/>][^>]*>", "", title)
    title = re.sub(r"(?s)<\s*/\s*[^>]+>", "", title)
    # Replace links by their text
    title = re.sub(r"(?si)\[\[\s*Category\s*:\s*([^]]+?)\s*\]\]", r"", title)
    title = re.sub(r"(?s)\[\[\s*([^]|]+?)\s*\|\s*([^]|]+?)"
                   r"(\s*\|\s*([^]|]+?))?\s*\]\]",
                   repl_link_bars, title)
    title = re.sub(r"(?s)\[\[\s*(([a-zA-z0-9]+)\s*:)?\s*([^][]+?)\]\]",
                   repl_link, title)
    title = re.sub(r"(?s)\[\[\s*:?([^]|]+?)\s*\]\]", repl_1, title)
    # Replace remaining HTML links by the URL.
    title = re.sub(r"\[(https?:)//[^]\s]+\s+([^]]+?)\s*\]", repl_2, title)
    # Remove any edit links to local pages
    title = re.sub(r"\[//[^]\s]+\s+edit\s*\]", "", title)
    # Remove italic and bold
    title = re.sub(r"''+", r"", title)
    # Replace HTML entities
    title = html.unescape(title)
    title = re.sub("\xa0", " ", title)  # nbsp
    # Replace whitespace sequences by a single space.
    title = re.sub(r"[ \t\r]+", " ", title)
    title = re.sub(r" *\n+", "\n", title)
    # This unicode quote seems to be used instead of apostrophe quite randomly
    # (about 4% of apostrophes in English entries, some in Finnish entries).
    # title = re.sub("\u2019", "'", title)  # Note: no r"..." here!
    # Replace strange unicode quotes with normal quotes
    # title = re.sub(r"‚Äù", '"', title)
    # Replace unicode long dash by normal dash
    # title = re.sub(r"‚Äì", "-", title)

    # Remove whitespace before periods and commas etc
    # XXX we might re-enable this, now trying without as it is removing some
    # instances where we would want to leave the space
    # title = re.sub(r" ([.,;:!?)])", repl_1, title)
    # Strip surrounding whitespace.
    if not no_strip:
        title = title.strip()
    # Normalize different ways of writing accents into the NFC canonical form
    title = unicodedata.normalize("NFC", title)
    return title
